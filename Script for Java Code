/****
Script to checkout the application repo, Build , push artifacts to artifactory and deploy on deployment server and sent notifications
Author: ####
Stages: CHECKOUT_STAGE: checkout the cicd code base and initialize all the required parameters as well as It will chekcout the UI repo
        BUILD_STAGE: Build the code from the branch and generate the build package
        UPLOAD_ARTIFACT_TO_ARTIFACTORY: Upload the artifacts from the slave node to Jfrog artifactory
        APPROVE_STAGE: Approval Process to deploy
	DEPLOY_STAGE: Deploy war on servers
        EmailNotification: Notifications
Methods:executeJavaCICD():   This is the main method of the pipeline execution start from this method
        init():                 Initialization of all the stages as well as all the properties
        getRepoNameFromURL():   Get repository name from the repo URL
        getBuildUserInfo():     Get user information from the build
		    sendEmailNotification(plMap): Send the notifications 
        deleteDir():            After execution of the pipeline it will delete the repo's from Node

****/
node("linux-mvn-docker-slave8"){
    def plMap = [:];
    init(plMap);
    dir("/tmp/jen_ws/ci/${env.ENV_NAME}/${plMap.profile}"){
    try {
        deleteDir();
        //Main method in pipeline execution start's from this method
        executeJavaCICD(plMap);
    }
    catch(ex){
	println "Exception while running the pipeline "+ex.getMessage();
        throw ex;
    }
    finally{
      //delete all the workspace after the job completion
        deleteDir();
    }
}
}
//Get application/component name from repo url
def getRepoNameFromURL(def gitURL){
    return gitURL.replace(".git","").split("/")[-1];
}

//Initialinzation of all the stages and loading all the properties file
def init(plMap){
    plMap.userInfo =	getBuildUserInfo();
    plMap.CHECKOUT_STAGE = "CheckOut";
    plMap.BUILD_STAGE = "Build";
    plMap.CODE_ANALYSIS_STAGE = "CodeAnalysis";
    plMap.UPLOAD_ARTIFACT_TO_ARTIFACTORY = "UploadArtifactToArtifactory";  
    plMap.APPROVE_STAGE = "Approve Stage"
    plMap.DEPLOY_STAGE = "Deploy";
    plMap.MERGE_TO_DEVELOP = "MergeToDevelop";
    plMap.EMAIL_NOTIFICATION_STAGE = "EmailNotification";
    plMap.NOT_STARTED = "Not Started";
    plMap.SUCCESS = "SUCCESS";
    plMap.FAILURE = "FAILURE";
    plMap.UNSTABLE = "ABORTED";
    plMap.stagesStatusMap = [:];
    plMap.stagesStatusMap.put(plMap.CHECKOUT_STAGE,plMap.NOT_STARTED);
    plMap.stagesStatusMap.put(plMap.CODE_ANALYSIS_STAGE,plMap.NOT_STARTED);
    plMap.stagesStatusMap.put(plMap.BUILD_STAGE,plMap.NOT_STARTED);
    plMap.stagesStatusMap.put(plMap.DEPLOY_STAGE,plMap.NOT_STARTED);
    plMap.stagesStatusMap.put(plMap.UPLOAD_ARTIFACT_TO_ARTIFACTORY,plMap.NOT_STARTED);

    println "Initializing all folder properties";
  //reading-getting all the environment properties
	withFolderProperties{
		env.CONFIG_REPO_URL =  env.CONFIG_REPO_URL;
		env.GIT_CRED_ID = env.GIT_CRED_ID;
		env.SONAR_HOST_URL = env.SONAR_HOST_URL;
    //kplMap.component = env.COMPONENT_NAME;
	  env.ENV_NAME = env.ENV_NAME;
    //plMap.profile = plMap.profile;
	}
}

def executeJavaCICD(plMap){
        def branchMap= [:];
        init(plMap);
        plMap.configRepoURL =  env.CONFIG_REPO_URL;
        //plMap.profile = plMap.profile;
        

        //To select the component based on application
        plMap.component = "${Application}"
        println ("ApplicationName: ${Application}")

        //To give the branch name to build the application code
        plMap.branchname= "${BranchName}"
        println ("Branch: ${BranchName}")

        //To select the component based on application
        plMap.profile = "${PROFILE}"
        println("Profile: ${PROFILE}")

        plMap.configRepoName = getRepoNameFromURL(plMap.configRepoURL);
		    println "configuration from Config Repo: ${plMap.configRepoName}"
        plMap.curMachineUserId = sh label: '', returnStdout: true, script: 'echo $USER'
        plMap.curMachineUserId = plMap.curMachineUserId.trim();

        println "User=${plMap.curMachineUserId}";
    
        try{
          //checking out CICD code as well as application repo's
          stage(plMap.CHECKOUT_STAGE){
            plMap.stagesStatusMap.put(plMap.CHECKOUT_STAGE,plMap.FAILURE);
            sh "git clone -b feature/clustersnamechange --single-branch ssh://git@bitbucket.es.ad.adp.com:7999/imms/${plMap.configRepoName}.git";
            sh "dir";
            //loading all the properties files like shared properties, branch properties and pipeline properties
            plMap.commonProperties = readProperties file: 
            "${plMap.configRepoName}\\common\\config\\shared.properties";
            plMap.branchProperties = readProperties file: 
            "${plMap.configRepoName}\\dev\\${plMap.profile}\\${plMap.component}\\config\\branch.properties";
            plMap.pipelineProperties = readProperties file: 
            "${plMap.configRepoName}\\dev\\${plMap.profile}\\${plMap.component}\\config\\pipeline.properties";
            println plMap.commonProperties
            println plMap.branchProperties;
            println plMap.pipelineProperties;
            plMap.pscpPath = plMap.commonProperties.PSCP_PATH;
            //credentials id to upload artifactory into repository
            plMap.credentialsId = plMap.commonProperties.JFROG_CREDENTIALS_ID;
            plMap.branchname= "${BranchName}"
            branchMap.branch= "${BranchName}".split("/");
            plMap.releaseVersion  = "${branchMap.branch[1]}"
            println("branchMap::${branchMap.branch}")
            println("release::${branchMap.branch[0]}")
            println("releaseversion::${branchMap.branch[1]}")
            //plMap.releaseVersion  =   "${plMap.branchProperties.MAJOR_VERSION}.${plMap.branchProperties.MINOR_VERSION}.${plMap.branchProperties.PATCH_VERSION}";
            plMap.releaseBuildNo  =  "${plMap.releaseVersion}.${currentBuild.number}";
            //plMap.branchProperties.BranchName  =  "${plMap.branchProperties.BranchName_PREFIX}${plMap.releaseVersion}";
            //plMap.repoBranchName = plMap.branchProperties.BranchName;
            plMap.repoBranchName = plMap.branchname;
            //Email initialization starts here
            plMap.emailToList    =  "${plMap.branchProperties.EMAIL_TO_APP_TEAM}${plMap.commonProperties.EMAIL_TO_AUTOMATION}${plMap.commonProperties.EMAIL_TO_DEVOPS}";
            //Email initialization ends here			
            //plMap.repoURL         =   plMap.branchProperties.REPO_URL;
            plMap.repoURL         =   "${plMap.configRepoName}\\common\\config\\shared.properties";
            if("${plMap.component}" == "iservices"){
                plMap.repoURL = "${plMap.commonProperties.iservices_REPO_URL}";
                println "${plMap.repoURL}"
            }else if("${plMap.component}" == "batch-reports"){
                plMap.repoURL = "${plMap.commonProperties.batch_reports_REPO_URL}";
                println "${plMap.repoURL}"
            }
            
            plMap.repoName        =   getRepoNameFromURL(plMap.repoURL);

            currentBuild.displayName = "${plMap.releaseVersion}.${currentBuild.displayName.replace("#","")}";

            plMap.codeAnalysisStageExists = plMap.pipelineProperties.CODE_ANALYSIS_STAGE.trim();
            plMap.appPort        = plMap.pipelineProperties.APP_PORT;
            plMap.sshUserName    = plMap.pipelineProperties.SSH_USER_NAME;
            plMap.sshPassword    = plMap.pipelineProperties.SSH_PASSWORD;

            //artifactory variables below
            plMap.artifactoryServer = plMap.commonProperties.ARTIFACTORY_SERVER;
            plMap.artifactoryCredId = plMap.commonProperties.ARTIFACTORY_CREDENTIAL_ID;
            plMap.artifactoryServerURL = plMap.commonProperties.ARTIFACTORY_SERVER_URL;

            plMap.targetServers         = plMap.pipelineProperties.TARGET_SERVERS.trim().split(";");
            plMap.targetDeploymentPath  = plMap.pipelineProperties.TARGET_DEPLOYMENT_PATH;

            plMap.artifactType  =  plMap.pipelineProperties.ARTIFACT_TYPE.trim().toLowerCase();

            manager.addShortText("Triggered by : ${plMap.userInfo}");
            manager.addShortText("branch : ${plMap.repoBranchName}");
            sh "git clone -b ${plMap.repoBranchName} --single-branch ssh://git@bitbucket.es.ad.adp.com:7999/imms/${plMap.repoName}.git";
			
        dir(plMap.repoName){
        //git branch: plMap.repoBranchName, credentialsId: "${env.GIT_CRED_ID}",
        //url: plMap.repoURL;
          if(!plMap.artifactType.equals("jar")){
                  // tagging starts here
              def tag = "v${plMap.releaseVersion}.${currentBuild.number}";
              sh "git tag ${tag}";
              //sh "git push origin ${tag}";
                  //tagging ends here
            }
              sh "rm .gitignore";
        }

			  plMap.stagesStatusMap.put(plMap.CHECKOUT_STAGE,plMap.SUCCESS);
			  
		  } 

    //Build the cloned code and generate the build package
    //This stage integrate the code,  build the code and generate the package/artifact	
		stage(plMap.BUILD_STAGE){
			plMap.stagesStatusMap.put(plMap.BUILD_STAGE,plMap.FAILURE);
			dir(plMap.repoName){  
                sh "mvn install";
				        sh "git status -uall";
                 plMap.sourceArtifactName = "imm-${plMap.component}-${plMap.releaseVersion}.${plMap.artifactType}"
                 plMap.sourceArtifactPOM= "imm-${plMap.component}-${plMap.releaseVersion}.pom";
                 if (plMap.artifactType.toLowerCase() == "war") {
                  plMap.targetArtifactName = "imm#${plMap.component.replace("-", "#")}.${plMap.artifactType}";
                } else {
                     plMap.targetArtifactName = plMap.sourceArtifactName;
                    plMap.targetArtifactPOMName = plMap.targetArtifactName.replace(plMap.artifactType,"pom");
                }
              	sh "mv target/${plMap.sourceArtifactName}  target/${plMap.targetArtifactName}"
                plMap.pom = readMavenPom file: 'pom.xml';
                println "pom.xm groupId=${plMap.pom.groupId} artifactId=${plMap.pom.artifactId}";
                plMap.groupId = plMap.pom.groupId;
                plMap.artifactId = plMap.pom.artifactId;
                plMap.localM2RepoArtifactFolderAbsPath = "/home/${plMap.curMachineUserId}/.m2/repository/com/adp/imm/${plMap.pom.artifactId}/${plMap.releaseVersion}";
                println "localM2RepoArtifactFolderAbsPath=${plMap.localM2RepoArtifactFolderAbsPath}";
			}
			plMap.stagesStatusMap.put(plMap.BUILD_STAGE,plMap.SUCCESS);
		}
          
/*
        stage(plMap.CODE_ANALYSIS_STAGE){
            if(plMap.codeAnalysisStageExists=="true"){
			    plMap.stagesStatusMap.put(plMap.CODE_ANALYSIS_STAGE,plMap.FAILURE);
			    dir(plMap.repoName){  
				    bat "mvn sonar:sonar -Dsonar.host.url=http://51.19.132.203:9000/sonar";
			    }
			    plMap.stagesStatusMap.put(plMap.CODE_ANALYSIS_STAGE,plMap.SUCCESS);
            }
		}
*/
        // Upload generated package to the artifactory
        stage(plMap.UPLOAD_ARTIFACT_TO_ARTIFACTORY) {
            plMap.stagesStatusMap.put(plMap.UPLOAD_ARTIFACT_TO_ARTIFACTORY, plMap.FAILURE)
            dir("${plMap.repoName}\\target") {
             	sh "dir"
              plMap.artifactoryArtifactName=  "imm-${plMap.component}-${currentBuild.displayName}.${plMap.artifactType}";
              plMap.artifactoryArtifactPOM=   "imm-${plMap.component}-${currentBuild.displayName}.pom";

              plMap.artifactorydisplayURL= "${plMap.artifactoryServerURL}/ui/repos/tree/General/";
              println plMap.artifactorydisplayURL

              plMap.artifactoryRelativePath= "imm-maven-local/com/adp/imm/imm-${plMap.component}/${plMap.releaseVersion}/";

                dir(plMap.localM2RepoArtifactFolderAbsPath){
                  sh "dir"
                  sh "mv ${plMap.sourceArtifactName}  ${plMap.artifactoryArtifactName}"
                  sh "mv ${plMap.sourceArtifactPOM}  ${plMap.artifactoryArtifactPOM}" 
                  sh "curl -u  imm_cicddev:ReleaseEngineering@123 -X PUT \"${plMap.artifactoryServerURL}/artifactory/${plMap.artifactoryRelativePath}\" -T ${plMap.artifactoryArtifactName} "
                  sh "curl -u  imm_cicddev:ReleaseEngineering@123 -X PUT \"${plMap.artifactoryServerURL}/artifactory/${plMap.artifactoryRelativePath}\" -T ${plMap.artifactoryArtifactPOM} "
                }
              
            }
            plMap.stagesStatusMap.put(plMap.UPLOAD_ARTIFACT_TO_ARTIFACTORY, plMap.SUCCESS)
            //input "You want to proceed to deploy release Versoin ${plMap.releaseVersion}"    
        }
   
     //approval process to approve the deployment
     stage(plMap.APPROVE_STAGE){
	      plMap.stagesStatusMap.put(plMap.APPROVE_STAGE,plMap.FAILURE);
	      println "Job will get cancelled automatically, if there is no response from approver within 120 seconds"
            timeout(time: 120, unit: 'SECONDS'){               
                def userInput = input id: 'userInput',
                    message: "Lets promote - ${plMap.component}-${plMap.profile}-${plMap.releaseVersion}", 
                    submitterParameter: 'submitter',
                    submitter: ' '     
                     plMap.stagesStatusMap.put(plMap.APPROVE_STAGE,plMap.SUCCESS);
             }
          }


		 //deploy the build packages on application server 
     stage(plMap.DEPLOY_STAGE){
			plMap.stagesStatusMap.put(plMap.DEPLOY_STAGE,plMap.FAILURE);
			  dir("${plMap.repoName}\\target"){
                  for(def targetServer : plMap.targetServers){
                     if(plMap.artifactType.equals("jar")){
                         bat """ssh -pw ${plMap.sshPassword} -r ${plMap.targetArtifactName} ${plMap.sshUserName}@${targetServer}:${plMap.targetDeploymentPath}""";

                    }
				    // deployment in only nonrestricted
				    sh """scp  ${plMap.targetArtifactName} ${plMap.sshUserName}@${targetServer}:${plMap.targetDeploymentPath}""";
                }
			 }
			plMap.stagesStatusMap.put(plMap.DEPLOY_STAGE,plMap.SUCCESS);
		}
            
        stage(plMap.MERGE_TO_DEVELOP){
			    plMap.stagesStatusMap.put(plMap.MERGE_TO_DEVELOP,plMap.FAILURE);
        try{
			    dir(plMap.repoName){  
				    sh "git checkout develop";
                    sh "git merge ${plMap.repoBranchName}";
                    sh "git push origin develop";
			    }
                plMap.stagesStatusMap.put(plMap.MERGE_TO_DEVELOP,plMap.SUCCESS);
            }
        catch(ex){
                println "********** Merge to Develop FAILED ************************";
            }
		     }
    }
      catch(ex){
        println "Pipeline failed, please check the logs below";
      	println "Ongoing Job Build Status :${currentBuild.result}";
      	println "Ongoing Job Build Status :${currentBuild.currentResult}";
        //to set the build status in case of plMap.FAILURE
      if(currentBuild.currentResult=="UNSTABLE"){
        currentBuild.result = plMap.UNSTABLE;
        throw ex;
      }else{
      	currentBuild.result = plMap.FAILURE;
        throw ex;
      }
    }
  
	finally{
	   stage(plMap.EMAIL_NOTIFICATION_STAGE){
	    println "Sending email to : ${plMap.emailToList}";
		sendEmailNotification(plMap);
	   }
	}
}

def sendEmailNotification(plMap){
	emailext body: getEmailBody(plMap), 
	recipientProviders: [developers()],
	subject: "CICD ${plMap.component}-${plMap.profile} Deployment ${currentBuild.displayName}-${currentBuild.currentResult}", 
	 to: plMap.emailToList,
	 attachLog: true;
}

def getEmailBody(plMap){
            for(def stage: plMap.stagesStatusMap.keySet()){
            println "${stage} : ${plMap.stagesStatusMap.get(stage)}";
            }
   def emailBody =  """
<html>
<head>
<style>
body{
    background-color:#fdfcf6 !important;
    color: #ebebeb !important;
}
table {
  width:100%;
}
table td {
    border: 0.3px solid #ebebeb;
    border-collapse: collapse;
    background-color: #897cb3;
    color: #ffffff;
    padding: 8px;
    text-align: left;
}


table th {
    border: 0.2px solid #ebebeb;
    border-collapse: collapse;
    background-color: #efdfd0;
    color: #121c4e;
    padding: 15px;
    text-align: left;
}

h1, h2, h3, h4, h5, h6{
    background-color:gray;
    color: #ffffff;
}
a:link, a:visited {
  background-color: #f44336;
  color: white;
  padding: 14px 25px;
  text-align: center;
  text-decoration: none;
  display: inline-block;
}

a:hover, a:active {
  background-color: #3ebede;
}
</style>
</head>
<body>
<div>

<div style="float:left !important;width:50% !important">
<h3>Job Build Status : ${currentBuild.currentResult}</h3>
<h3>Triggered by : ${userInfo} </h3>
<h4>Execution time : ${currentBuild.durationString.replace("and counting","")} </h4>
<h4>Branch : ${plMap.repoBranchName}</h4>
<a href="${currentBuild.absoluteUrl}"><h5>Jenkins Build URL</h5></a>
<a href="${env.SONAR_HOST_URL}:9000/sonar/dashboard?id=com.adp.imms:imms-${plMap.component}"><h5>Code Analysis URL</h5></a>
<a href="${plMap.artifactoryServerBaseURL}${plMap.artifactoryRelativePath}"><h5>Uploaded JFrog Artifact URL</h5></a>
</div>
<div >
<table>
<tr><th>Stage</th><th>Result</th></tr>""";

for(def stage: plMap.stagesStatusMap.keySet()){
    emailBody+= """<tr><td>${stage}</td><td>${plMap.stagesStatusMap.get(stage)}</td></tr>""";
}
emailBody+= """
</table>
</div>


</div>
</body>
</html>
""";
return emailBody;
}


def getBuildUserInfo(){
    // plMap.userInfo="";
    emailId ="";
    userId ="";
    try{
    wrap([$class: 'BuildUser']) {
        emailId = BUILD_USER_EMAIL;
        userId = BUILD_USER_ID;
        if(null==emailId || null==userId ||  emailId.trim().length()==0)
        emailId = "AutoTrigger";
        BUILD_USER_EMAIL = emailId;
    }
    }
    catch(ex){
        userInfo = "AutoTrigger";
		println "Exception at getBuildUserInfo method : ${ex.getMessage()}"
        return userInfo;
    }
  userInfo = "${userId} - ${emailId}";
  return userInfo;
}
